---
driver:
  name: docker

provisioner:
  product_name: chef
  product_version: 15

platforms:
  - name: amazonlinux-1
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/Amazon/1' : nil %>
          key_file_uri: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/Amazon/1/repomd.xml.key' : nil %>
        validate_gpg_key: false  # This is ONLY for test purposes! Don't do this in your actual roles/recipes
    driver_config:
      image: amazonlinux:1
      run_command: /sbin/init
      privileged: true
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - yum install -y audit initscripts
        - sed -i 's/local_events = yes/local_events = no/g' /etc/audit/auditd.conf
        - chkconfig auditd on
  - name: amazonlinux-2
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/Amazon/2' : nil %>
          key_file_uri: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/Amazon/2/repomd.xml.key' : nil %>
        validate_gpg_key: false  # This is ONLY for test purposes! Don't do this in your actual roles/recipes
    driver_config:
      image: amazonlinux:2
      run_command: /sbin/init
      privileged: true
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - yum install -y audit initscripts
        - sed -i 's/local_events = yes/local_events = no/g' /etc/audit/auditd.conf
        - systemctl enable auditd.service
  - name: amazonlinux-2-arm
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/Amazon/2' : nil %>
          key_file_uri: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/Amazon/2/repomd.xml.key' : nil %>
        validate_gpg_key: false  # This is ONLY for test purposes! Don't do this in your actual roles/recipes
    driver_config:
      image: arm64v8/amazonlinux:2
      run_command: /sbin/init
      privileged: true
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - yum install -y audit initscripts
        - sed -i 's/local_events = yes/local_events = no/g' /etc/audit/auditd.conf
        - systemctl enable auditd.service
  - name: centos-7
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/EL/7' : nil %>
          key_file_uri: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/EL/7/repomd.xml.key' : nil %>
        validate_gpg_key: false # This is ONLY for test purposes! Don't do this in your actual roles/recipes
    driver_config:
      image: centos:7
      run_command: /sbin/init
      privileged: true
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - yum install -y audit initscripts
        - sed -i 's/local_events = yes/local_events = no/g' /etc/audit/auditd.conf
        - systemctl enable auditd.service
  - name: centos-8
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/EL/8' : nil %>
          key_file_uri: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/EL/8/repomd.xml.key' : nil %>
        validate_gpg_key: false # This is ONLY for test purposes! Don't do this in your actual roles/recipes
    driver_config:
      image: centos:8
      run_command: /sbin/init
      privileged: true
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - yum install -y audit initscripts
        - sed -i 's/local_events = yes/local_events = no/g' /etc/audit/auditd.conf
        - systemctl enable auditd.service
  - name: centos-8-arm
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/EL/8' : nil %>
          key_file_uri: <%= ENV['TS_RPM_REPO_URL'] != nil ? ENV['TS_RPM_REPO_URL'] + '/EL/8/repomd.xml.key' : nil %>
        validate_gpg_key: false # This is ONLY for test purposes! Don't do this in your actual roles/recipes
    driver_config:
      image: arm64v8/centos:8
      run_command: /sbin/init
      privileged: true
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - yum install -y audit initscripts
        - sed -i 's/local_events = yes/local_events = no/g' /etc/audit/auditd.conf
        - systemctl enable auditd.service
  - name: debian-8
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: debian:8
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
  - name: debian-9
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: debian:9
      run_command: /bin/systemd
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: debian-10
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: debian:10
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: debian-10-arm
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: arm64v8/debian:10
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: ubuntu-16.04
    attributes:
       threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: ubuntu:16.04
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: ubuntu-18.04
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: ubuntu:18.04
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: ubuntu-18.04-arm
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: arm64v8/ubuntu:18.04
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: ubuntu-20.04
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: ubuntu:20.04
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg
  - name: ubuntu-20.04-arm
    attributes:
      threatstack:
        repo:
          url: <%= ENV['TS_DEB_REPO_URL'] != nil ? ENV['TS_DEB_REPO_URL']: nil %>
          key: <%= ENV['TS_DEB_REPO_KEY'] != nil ? ENV['TS_DEB_REPO_KEY'] : nil %>
          components: <%= ENV['TS_REPO_COMPONENTS'] != nil ? ENV['TS_REPO_COMPONENTS'] : nil %>
    driver_config:
      image: arm64v8/ubuntu:20.04
      run_command: /sbin/init
      cap_add:
        - SYS_ADMIN
      run_options:
        env: container=docker
      volume:
        - /sys/fs/cgroup:/sys/fs/cgroup
      provision_command:
        - sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config
        - systemctl enable ssh.service
        - apt install -y gnupg

suites:
  - name: default
    run_list:
      - recipe[setup]
      - recipe[threatstack]
    provisioner:
      encrypted_data_bag_secret_key_path: test/integration/data_bags/insecure_data_bag_secret
    attributes:
      apt:
        compile_time_update: true
      threatstack:
        deploy_key: <%= ENV['TS_DEPLOY_KEY'] != nil ? ENV['TS_DEPLOY_KEY'] : nil %>
        url: <%= ENV['TS_URL'] != nil ? ENV['TS_URL'] : nil %>
        version: <%= ENV['TS_PACKAGE_VERSION'] != nil ? ENV['TS_PACKAGE_VERSION'] : nil %>
        configure_agent: <%= ENV['TS_CONFIG_AGENT'] == '0' ? false : true %>
  - name: upgrades
    run_list:
      - recipe[setup]
      - recipe[install_old_agent]
      - recipe[threatstack]
    provisioner:
      encrypted_data_bag_secret_key_path: test/integration/data_bags/insecure_data_bag_secret
    excludes:
      - debian-10
      - ubuntu-20.04
      - centos-8
    attributes:
      apt:
        compile_time_update: true
      threatstack:
        deploy_key: <%= ENV['TS_DEPLOY_KEY'] != nil ? ENV['TS_DEPLOY_KEY'] : nil %>
        url: <%= ENV['TS_URL'] != nil ? ENV['TS_URL'] : nil %>
        version: <%= ENV['TS_PACKAGE_VERSION'] != nil ? ENV['TS_PACKAGE_VERSION'] : nil %>
        configure_agent: <%= ENV['TS_CONFIG_AGENT'] == '0' ? false : true %>
        agent_config_args: <%= ENV['TS_CONFIG_ARGS'] != nil ? ENV['TS_CONFIG_ARGS'] : "['log.maxSize 22']" %>
  - name: custom
    run_list:
      - recipe[setup]
      - recipe[threatstack]
    provisioner:
      encrypted_data_bag_secret_key_path: test/integration/data_bags/insecure_data_bag_secret
    attributes:
      apt:
        compile_time_update: true
      threatstack:
        deploy_key: <%= ENV['TS_DEPLOY_KEY'] != nil ? ENV['TS_DEPLOY_KEY'] : nil %>
        url: <%= ENV['TS_URL'] != nil ? ENV['TS_URL'] : nil %>
        version: <%= ENV['TS_PACKAGE_VERSION'] != nil ? ENV['TS_PACKAGE_VERSION'] : nil %>
        agent_config_args: <%= ENV['TS_CONFIG_ARGS'] != nil ? ENV['TS_CONFIG_ARGS'] : ['log.maxSize 22'] %>
        configure_agent: <%= ENV['TS_CONFIG_AGENT'] == '0' ? false : true %>
